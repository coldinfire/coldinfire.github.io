<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/categories/JAVA/</link>
    <description>Recent content in JAVA on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coldinfire.github.io/categories/JAVA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title> Redis 基本使用 </title>
      <link>https://coldinfire.github.io/2018/WEB_DB_Redis_Basic/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_DB_Redis_Basic/</guid>
      <description>Redis 简介 redis 时一款高性能的非关系型数据库(NOSQL)，包含多种数据结构、支持网络、可选持久性的键值对存储数据库。 数据的存储格式是key,val</description>
    </item>
    
    <item>
      <title> 日志使用 </title>
      <link>https://coldinfire.github.io/2018/WEB_Frame_Log_Log4j/</link>
      <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Frame_Log_Log4j/</guid>
      <description>1.log4j 是Apache为java提供日志管理的工具 作用：可以调试程序，就像输出一样 2.核心概念： log4j有三大组件： 日志器（Logger） 日志输</description>
    </item>
    
    <item>
      <title> SpringMVC 使用 </title>
      <link>https://coldinfire.github.io/2018/WEB_Frame_SpringMVC/</link>
      <pubDate>Sun, 07 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Frame_SpringMVC/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Spring 使用 </title>
      <link>https://coldinfire.github.io/2018/WEB_Frame_Spring/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Frame_Spring/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Mybatis CRUD 操作</title>
      <link>https://coldinfire.github.io/2017/WEB_Frame_Mybatis_CRUD/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_Frame_Mybatis_CRUD/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Mybatis 配置文件 </title>
      <link>https://coldinfire.github.io/2017/WEB_Frame_Mybatis_Config/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_Frame_Mybatis_Config/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Mybatis 使用 </title>
      <link>https://coldinfire.github.io/2017/WEB_Frame_Mybatis/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_Frame_Mybatis/</guid>
      <description>Mybatis 官方文档：https://mybatis.org/mybatis-3/zh/configuration.html MyBatis 简介 MyBatis 是一款优秀的持久层</description>
    </item>
    
    <item>
      <title> 数据库连接池 </title>
      <link>https://coldinfire.github.io/2017/JAVA_JDBC_Pool/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_JDBC_Pool/</guid>
      <description>数据库连接池的应用 每次访问数据库都会创建一个连接，初始化连接，关闭连接，会执行访问数据库的所有操作，由于每次创建初始化连接和关闭连接会花费大</description>
    </item>
    
    <item>
      <title> JDBC 连接 </title>
      <link>https://coldinfire.github.io/2017/JAVA_JDBC/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_JDBC/</guid>
      <description>JDBC JDBC (Java DataBase Connectivity )，是利用 Java 语言或程序连接并且访问数据库的一门技术，是 Java 程序访问数据库的标准接口，通常是面向关系型数据库的。各个数据库厂商自己去实</description>
    </item>
    
    <item>
      <title> Spring JDBC 连接 </title>
      <link>https://coldinfire.github.io/2017/JAVA_JDBC_Spring/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_JDBC_Spring/</guid>
      <description>Spring JDBC Spring 框架对 JDBC 的简单封装。提供一个 JDBCTemplate 对象简化 JDBC 的开发 使用步骤 Step1： 下载 spring-framework jar 包 并导入需要的 jar 包 Step2：创建 JdbcTemplate 对象。依赖于数据源 DataSource JdbcTemplate template</description>
    </item>
    
    <item>
      <title> MySQL 高级操作 </title>
      <link>https://coldinfire.github.io/2017/WEB_DB_MySQL_High/</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_DB_MySQL_High/</guid>
      <description>MySQL 事务操作 如果一个包含多个步骤的业务操作被事务管理，那么这些操作要么同时成功，要么同时失败。 事务执行是一个整体，所有 SQL 语句都必须执行成功。如</description>
    </item>
    
    <item>
      <title> MySQL 基本操作 </title>
      <link>https://coldinfire.github.io/2017/WEB_DB_MySQL_Basic/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_DB_MySQL_Basic/</guid>
      <description>MySQL 数据库 服务器启动和关闭 Windows：services.msc 查看服务信息，可以启动和关闭 MySQL 服务 Command：net start mysql | net stop mysql ，启动和</description>
    </item>
    
    <item>
      <title> JSP 标签库 </title>
      <link>https://coldinfire.github.io/2017/JAVA_JSP_JSTL/</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_JSP_JSTL/</guid>
      <description>EL表达式 表达式语言（Expression Language，EL），EL 表达式是用 ${expression} 括起来的脚本，用来更方便的读取对象。EL 表达式主要用来读</description>
    </item>
    
    <item>
      <title> JSP 使用 </title>
      <link>https://coldinfire.github.io/2017/JAVA_JSP_Basic/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_JSP_Basic/</guid>
      <description>JSP 简介 JSP 全称 Java Server Pages，是一种动态网页开发技术。它使用 JSP 标签在 HTML 网页中插入 Java 代码。 JSP 基于Java Servlet API，JSP 网页就是用另一种方式来编</description>
    </item>
    
    <item>
      <title> Filter 过滤器 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Filter/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Filter/</guid>
      <description>Filter 使用 Filter 是 Servlet2.3 新增加的功能，它不是 Servlet，不能处理用户请求，也不能处理用户响应。主要对 HttpServletRequest 进行预处理，也对 HttpServletResponse 进行后续处理，是典型的处理链</description>
    </item>
    
    <item>
      <title> Listener 监听器 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Listener/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Listener/</guid>
      <description>监听器使用 基于观察者模式设计的，Listener 的设计对开发 Servlet 应用程序提供了一种快捷的手段，能够方便的从另一个纵向维度控制程序和数据。 Lis</description>
    </item>
    
    <item>
      <title> Servlet Cookie&amp;Session对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_CookieSession/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_CookieSession/</guid>
      <description>Cookie：客户端会话技术 Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。一般用于存储少量的不太敏感的数据信息，以键值</description>
    </item>
    
    <item>
      <title> Servlet ServletContext 对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_ServletContext/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_ServletContext/</guid>
      <description>ServletContext 对象 ServletContext 代表整个WEB应用，可以和程序的容器(服务器)通讯 获取 ServletContext 对象 通过 request 对象获取 request.getServletContext() 通过 HttpServlet 获取 this.getServletContext(); 功能 获取 MIME 类型 MIME 类型：在互联网通信过程中定义</description>
    </item>
    
    <item>
      <title> Servlet 下载文件 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_DownloadFile/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_DownloadFile/</guid>
      <description>文件下载 HTML File &amp;lt;body&amp;gt; &amp;lt;a href=&amp;#34;/Test/DownloadFile?filename=pvp.png&amp;#34;&amp;gt;download picture&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;a href=&amp;#34;/Test/DownloadFile?filename=1.avi&amp;#34;&amp;gt;download video&amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; 中文文件名 public class DownloadUtils{ public static String getFileName(String agent,String filename) throws UnsupportedEncodingException{ if(agent.contains(&amp;#34;MSIE&amp;#34;)){ // IE 浏览器 filename = URLEncoder.encode(filename,&amp;#34;utf-8&amp;#34;); filename = filename.replace(&amp;#34;+&amp;#34;,&amp;#34; &amp;#34;); } else if (agent.contains(&amp;#34;Firefox&amp;#34;)){ BASE64Encoder base64Encoder = new BASE64Encoder(); filename = &amp;#34;=?utf-8?B?&amp;#34; + base64Encoder.encode(filename.getBytes(&amp;#34;utf-8&amp;#34;)) } &amp;#34;?=&amp;#34;; } else{ filename = URLEncoder.encode(filename, &amp;#34;utf-8&amp;#34;); } return filename; } }</description>
    </item>
    
    <item>
      <title> Servlet Response 对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Respose/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Respose/</guid>
      <description>Servlet Response 对象 ServletResponse 接口表示一个 Servlet 响应，在调用 Servlet 的Service( )方法前，Servlet 容器会先创建一个 ServletResponse 对象，并把它作为返回参数传给 Service( )方法。 ServletResponse 对</description>
    </item>
    
    <item>
      <title> Servlet Request 对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Request/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Request/</guid>
      <description>Servlet Request 对象 Servlet 容器对于接受到的每一个 Http 请求，都会创建一个 ServletRequest 对象，并把这个对象传递给 Servlet 的 Sevice( )方法。其中，ServletRequest 对象内封装了关</description>
    </item>
    
    <item>
      <title> Servlet 解析 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet/</guid>
      <description>Servlet 简介 Servlet 是 Java Web 的一种实现技术，可以接收浏览器发送过来的请求并给出响应。 Servlet 的创建 Method 1 : 实现 Servlet 接口 Step1：创建类并实现 Servlet 接口 public class TestServlet implements Servlet { @Override public</description>
    </item>
    
    <item>
      <title> JAVA 反射 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Reflection/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Reflection/</guid>
      <description>反射 Java 反射机制 (Reflection) 在程序 运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。 这种动态</description>
    </item>
    
    <item>
      <title> JAVA IO </title>
      <link>https://coldinfire.github.io/2017/JAVA_IO/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_IO/</guid>
      <description>IO 流简介 Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。 流是一组有顺序的，有起点和终点的字节集合，是对数据传输</description>
    </item>
    
    <item>
      <title> JAVA 集合框架 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Collection/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Collection/</guid>
      <description>集合 集合类的特点：集合只用于存储对象，集合长度是可变的，集合可以存储不同类型的对象。 所有集合类都位于 java.util包下。 集合里只能保存对</description>
    </item>
    
    <item>
      <title> BeanUtil 工具类使用 </title>
      <link>https://coldinfire.github.io/2017/JAVA_BeanUtil/</link>
      <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_BeanUtil/</guid>
      <description>BeanUtils的使用 commons-beanutils 是 Apache 组织下的一个基础的开源库，它提供了对 Java 反射和内省的 API 的包装，依赖内省，其主要目的是利用反射机制对 JavaBean 的属性进行处</description>
    </item>
    
  </channel>
</rss>