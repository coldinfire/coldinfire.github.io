<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Servlet on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/tags/Servlet/</link>
    <description>Recent content in Servlet on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coldinfire.github.io/tags/Servlet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title> Filter 过滤器 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Filter/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Filter/</guid>
      <description>Filter 使用 Filter 是 Servlet2.3 新增加的功能，它不是 Servlet，不能处理用户请求，也不能处理用户响应。主要对 HttpServletRequest 进行预处理，也对 HttpServletResponse 进行后续处理，是典型的处理链</description>
    </item>
    
    <item>
      <title> Listener 监听器 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Listener/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Listener/</guid>
      <description>监听器使用 基于观察者模式设计的，Listener 的设计对开发 Servlet 应用程序提供了一种快捷的手段，能够方便的从另一个纵向维度控制程序和数据。 Lis</description>
    </item>
    
    <item>
      <title> Servlet Cookie&amp;Session对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_CookieSession/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_CookieSession/</guid>
      <description>Cookie：客户端会话技术 Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。一般用于存储少量的不太敏感的数据信息，以键值</description>
    </item>
    
    <item>
      <title> Servlet ServletContext 对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_ServletContext/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_ServletContext/</guid>
      <description>ServletContext 对象 ServletContext 代表整个WEB应用，可以和程序的容器(服务器)通讯 获取 ServletContext 对象 通过 request 对象获取 request.getServletContext() 通过 HttpServlet 获取 this.getServletContext(); 功能 获取 MIME 类型 MIME 类型：在互联网通信过程中定义</description>
    </item>
    
    <item>
      <title> Servlet 下载文件 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_DownloadFile/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_DownloadFile/</guid>
      <description>文件下载 HTML File &amp;lt;body&amp;gt; &amp;lt;a href=&amp;#34;/Test/DownloadFile?filename=pvp.png&amp;#34;&amp;gt;download picture&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;a href=&amp;#34;/Test/DownloadFile?filename=1.avi&amp;#34;&amp;gt;download video&amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; 中文文件名 public class DownloadUtils{ public static String getFileName(String agent,String filename) throws UnsupportedEncodingException{ if(agent.contains(&amp;#34;MSIE&amp;#34;)){ // IE 浏览器 filename = URLEncoder.encode(filename,&amp;#34;utf-8&amp;#34;); filename = filename.replace(&amp;#34;+&amp;#34;,&amp;#34; &amp;#34;); } else if (agent.contains(&amp;#34;Firefox&amp;#34;)){ BASE64Encoder base64Encoder = new BASE64Encoder(); filename = &amp;#34;=?utf-8?B?&amp;#34; + base64Encoder.encode(filename.getBytes(&amp;#34;utf-8&amp;#34;)) } &amp;#34;?=&amp;#34;; } else{ filename = URLEncoder.encode(filename, &amp;#34;utf-8&amp;#34;); } return filename; } }</description>
    </item>
    
    <item>
      <title> Servlet Response 对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Respose/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Respose/</guid>
      <description>Servlet Response 对象 ServletResponse 接口表示一个 Servlet 响应，在调用 Servlet 的Service( )方法前，Servlet 容器会先创建一个 ServletResponse 对象，并把它作为返回参数传给 Service( )方法。 ServletResponse 对</description>
    </item>
    
    <item>
      <title> Servlet Request 对象 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet_Request/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet_Request/</guid>
      <description>Servlet Request 对象 Servlet 容器对于接受到的每一个 Http 请求，都会创建一个 ServletRequest 对象，并把这个对象传递给 Servlet 的 Sevice( )方法。其中，ServletRequest 对象内封装了关</description>
    </item>
    
    <item>
      <title> Servlet 解析 </title>
      <link>https://coldinfire.github.io/2017/JAVA_Servlet/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/JAVA_Servlet/</guid>
      <description>Servlet 简介 Servlet 是 Java Web 的一种实现技术，可以接收浏览器发送过来的请求并给出响应。 Servlet 的创建 Method 1 : 实现 Servlet 接口 Step1：创建类并实现 Servlet 接口 public class TestServlet implements Servlet { @Override public</description>
    </item>
    
  </channel>
</rss>