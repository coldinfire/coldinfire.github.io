<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>abaputils on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/tags/abaputils/</link>
    <description>Recent content in abaputils on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coldinfire.github.io/tags/abaputils/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title> 分割文件路径和文件名 </title>
      <link>https://coldinfire.github.io/2022/ABAP_Utils_SplitFilePath/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2022/ABAP_Utils_SplitFilePath/</guid>
      <description>从文件完整路径中拆分路径和文件名。 FUNCTION：SO_SPLIT_FILE_AND_PATH DATA: lv_file_path TYPE string VALUE &amp;#39;D:\WORKFILES\ITAB.XLSX&amp;#39;. DATA: lv_path_only type string, lv_filename_only type string. CALL FUNCTION &amp;#39;SO_SPLIT_FILE_AND_PATH&amp;#39; EXPORTING full_name = lv_file_path IMPORTING stripped_name</description>
    </item>
    
    <item>
      <title> SAP 获取表字段所有信息 </title>
      <link>https://coldinfire.github.io/2022/ABAP_Utils_TableFields/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2022/ABAP_Utils_TableFields/</guid>
      <description>DDIF_FIELDINFO_GET Reading Text on Tables or Types. SE37 执行 DDIF_NAMETAB_GET 输入表名： 点击执行后，返回表信息： 表字段的详细信息： 使用到的核心表 DD03L：Table Fields DD03T：DD: Texts for fields (language dependent)</description>
    </item>
    
    <item>
      <title> ABAP 动态函数调用 </title>
      <link>https://coldinfire.github.io/2021/ABAP_DynamicFM/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_DynamicFM/</guid>
      <description>调用语法 CALL FUNCTION [PARAMETER-TABLE ptab] [EXCEPTION-TABLE etab]. ：通过特殊的内部表 ptab 和 etab 将实际参数分配给功能模块的形式参数，并将值返回给非基于类的异常。 使用参数 PARAMETER-TA</description>
    </item>
    
    <item>
      <title> SAP 外币金额汇率转换 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_CurrencyRate/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_CurrencyRate/</guid>
      <description>SAP 金额/汇率处理逻辑 SAP 中对于金额和汇率字段的处理(一般是会计相关的：会计发票、销售发票、采购发票等)有点特殊，并不是说你在前台看到的数据是多</description>
    </item>
    
    <item>
      <title> SAP RFC Function Log 报表 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_RFC_Log-_Report/</link>
      <pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_RFC_Log-_Report/</guid>
      <description>程序功能设计</description>
    </item>
    
    <item>
      <title> ABAP 程序锁定 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_LockProgramer/</link>
      <pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_LockProgramer/</guid>
      <description>在 SAP 中对于一些重要的程序，可能会要求处理并发的情况，在有用户操作的情况下不允许其他用户进行操作，以此来保证数据及程序的安全。 使用锁对象 程序锁</description>
    </item>
    
    <item>
      <title> SAP RFC Function 日志工具 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_RFC_Log/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_RFC_Log/</guid>
      <description>SAP 与外部系统接口日志记录 工具结构设计 表设计 Log 信息表：ZFUNC_LOG 输入参数 Log 表： ZFUNC_LOG_DATA 输出参数 Log 表： ZFUNC_LOG_DATA_E 程序结构设计 RFC 传入参数保存 传入参数如果</description>
    </item>
    
    <item>
      <title> SAP 全局宏设置和使用 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_GlobalMacro/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_GlobalMacro/</guid>
      <description>宏定义和使用 在 ABAP 代码的开发中通过使用DEFINE ... END-OF-DEFINITION. 来创建局部的宏变量，通过局部宏变量的设定可以让代码变得更加简单，同时也避免了代码冗余。 最</description>
    </item>
    
    <item>
      <title> Debug 弹出框 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_DebugPopWindow/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_DebugPopWindow/</guid>
      <description>参考链接：https://mp.weixin.qq.com/s/R47RBR65JKUyyME1THMILg Debug 弹出框示例 MM03 输入物料，会弹出框</description>
    </item>
    
    <item>
      <title> DBCO 执行结果查询 </title>
      <link>https://coldinfire.github.io/2021/ABAP_SQL_DBCO_Result/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_SQL_DBCO_Result/</guid>
      <description>查询 DBCO 执行结果 Step1：执行程序 ADBC_QUERY DB Connection Name：DBCO 中配置的数据库连接名称 Table Name：DBCO 配置连接的数据库对应数据表的表名称 Ste</description>
    </item>
    
    <item>
      <title> ABAP 数值四舍五入函数 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_RoundDecimals/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_RoundDecimals/</guid>
      <description>ABAP 保留指定小数位 ROUND函数 INT_SORT-MENGE = ROUND( VAL = LTB-EMENG * P_QPA DEC = 3 MODE = 1 ). mode代表着小数省略的规则， 1： 默认值，这个值总是从 0 四舍五入到更大的绝对值 5</description>
    </item>
    
    <item>
      <title> ABAP 数字金额转为大写 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_AmountToUpcase/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_AmountToUpcase/</guid>
      <description>SAP 实际业务中可能会有将金额、重量等数字格式转换为中文大写或则英文大写的银行金额内容。可以使用标准的函数 SPELL_AMOUNT 来进行处理，但是要注意该函数可能出现</description>
    </item>
    
    <item>
      <title> Grid ALV:Fieldcat 自动填充工具 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_GridALV_FieldcatCreate/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_GridALV_FieldcatCreate/</guid>
      <description>TOP TYPE-POOLS slis. FORM frm_get_fields USING pt_data type any table CHANGING pt_fields TYPE ddfields. DATA: lr_tabdescr TYPE REF TO cl_abap_structdescr, lr_data TYPE REF TO data, lt_fields TYPE ddfields. CREATE DATA lr_data LIKE LINE OF pt_data. lr_tabdescr ?= cl_abap_structdescr=&amp;gt;describe_by_data_ref( lr_data ). lt_fields = cl_salv_data_descr=&amp;gt;read_structdescr( lr_tabdescr ). pt_fields = lt_fields. ENDFORM. Z_FALV_FIELD_CATALOG IMPORT：IT_ALV TYPE ANY TABLE. TABL</description>
    </item>
    
    <item>
      <title> ABAP 获取CLASS参数结果 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionClass/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionClass/</guid>
      <description>Read Class Data data: i_class type klah-class. data: i_classtype type klah-klart. data: i_key_date type sy-datum default sy-datum. data: e_structure type ref to cl_abap_structdescr, et_data type ref to data, e_table type ref to cl_abap_tabledescr. field-symbols: &amp;lt;char&amp;gt; type bapi1003_charact_r. data: mt_classdescriptions type standard table of bapi1003_catch_r. data: mt_classlongtexts type standard table of bapi1003_longtext_r. data: mt_classcharacteristics type standard table of bapi1003_charact_r. data: mt_classcharactvalues type standard table of bapi1003_char_val_r. data: mt_return type standard table</description>
    </item>
    
    <item>
      <title> ABAP 获取FM参数结果 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionFM/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionFM/</guid>
      <description>获取FM的参数 REPORT zz_get_fm_detail. DATA: ls_trans_callstack TYPE sys_calls, lt_trans_callstack TYPE sys_callst. DATA: lv_trans_funtion_name TYPE string. DATA: ls_trans_fupararef TYPE fupararef, lt_trans_fupararef TYPE TABLE OF fupararef. FIELD-SYMBOLS: &amp;lt;fs_zz_trans_field&amp;gt; TYPE ANY. FIELD-SYMBOLS: &amp;lt;fs_zz_trans_workarea&amp;gt; TYPE ANY. FIELD-SYMBOLS: &amp;lt;fs_zz_trans_tab&amp;gt; TYPE ANY TABLE. CLEAR lt_trans_callstack[]. CALL FUNCTION &amp;#39;SYSTEM_CALLSTACK&amp;#39; IMPORTING * callstack = callstack et_callstack = lt_trans_callstack. CLEAR: ls_trans_callstack. READ TABLE lt_trans_callstack INTO ls_trans_callstack WITH KEY eventtype = &amp;#39;FUNC&amp;#39;. IF ls_trans_callstack IS</description>
    </item>
    
    <item>
      <title> ABAP 反射 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_Reflection/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_Reflection/</guid>
      <description>RTTS(Runtime Type Services) 使用 在 ABAP 中，反射是通过运行时类型服务 (RTTS) 提供的。该服务提供了两个主要功能：在运行时识别类型和描述，以及动态创建类型。更具体地说，RTTS</description>
    </item>
    
    <item>
      <title> BAPI:VIEW_MAINTENANCE_CALL 使用 </title>
      <link>https://coldinfire.github.io/2021/ABAP_TABLE_BAPI_Maintenance/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_TABLE_BAPI_Maintenance/</guid>
      <description>BAPI: VIEW_MAINTENANCE_CALL DATA:LT_SELLIST LIKE TABLE OF VIMSELLIST WITH HEADER LINE. CLEAR:LT_SELLIST. REFRESH: LT_SELLIST. LT_SELLIST-VIEWFIELD = &amp;#39;BUKRS&amp;#39;. LT_SELLIST-OPERATOR = &amp;#39;EQ&amp;#39;. LT_SELLIST-VALUE = P_BUKRS. LT_SELLIST-AND_OR = &amp;#39;AND&amp;#39;. APPEND LT_SELLIST. CALL FUNCTION &amp;#39;VIEW_MAINTENANCE_CALL&amp;#39; EXPORTING ACTION = &amp;#39;U&amp;#39; &amp;#34;S = Display U = Change T = Transport&amp;#34; VIEW_NAME = &amp;#39;ZCO002&amp;#39; TABLES DBA_SELLIST = LT_SELLIST EXCEPTIONS CLIENT_REFERENCE = 1 FOREIGN_LOCK = 2 INVALID_ACTION = 3 NO_CLIENTINDEPENDENT_AUTH = 4 NO_DATABASE_FUNCTION = 5 NO_EDITOR_FUNCTION = 6 NO_SHOW_AUTH</description>
    </item>
    
    <item>
      <title> ABAP 调用HTTP请求 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_HttpFunction/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_HttpFunction/</guid>
      <description>SAP 使用HTTP 示例程序 REPORT ZZ_SEND_HTTP. * Selection Screen SELECTION-SCREEN BEGIN OF BLOCK bk01 WITH FRAME TITLE text-001. PARAMETER p_fname TYPE RS38L_FNAM. PARAMETER p_json TYPE string. SELECTION-SCREEN END OF BLOCK bk01. * Message TYPE: BEGIN OF str_message, type TYPE bapi_mtype, message TYPE bapi_msg, END OF str_message. DATA: e_data TYPE str_message. * Connection Parameter DATA:lt_setting TYPE TABLE OF zws_http_url WITH HEADER LINE. DATA:lv_url TYPE</description>
    </item>
    
    <item>
      <title> ABAP Json 转换 </title>
      <link>https://coldinfire.github.io/2021/ABAP_JSON/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_JSON/</guid>
      <description>ABAP 对象和 JSON 格式的转换工具 创建工具类 SE24：创建类,输入描述并选择类型 点击保存 定义属性值 需要创建的方法 方法详细代码列表 定义Types Section 定义 Public</description>
    </item>
    
    <item>
      <title> ABAP&amp;Json 转换 Methods </title>
      <link>https://coldinfire.github.io/2021/ABAP_JSON_Methods/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_JSON_Methods/</guid>
      <description>方法列表 DATA_TO_JSON METHOD DATA_TO_JSON. DATA:LO_DESCR TYPE REF TO CL_ABAP_TYPEDESCR. LO_DESCR = CL_ABAP_TYPEDESCR=&amp;gt;DESCRIBE_BY_DATA( IA_DATA ). RV_JSON = DATA_TO_JSON_INTERNAL( IA_DATA = IA_DATA IO_DESCR = LO_DESCR ). &amp;#34;Test if root is an single element, if yes root object { ... } needed&amp;#34; IF LO_DESCR-&amp;gt;KIND EQ CL_ABAP_TYPEDESCR=&amp;gt;KIND_ELEM. CONCATENATE &amp;#39;{&amp;#34;$ROOT&amp;#34;:&amp;#39; RV_JSON &amp;#39;}&amp;#39; INTO RV_JSON. ENDIF. ENDMETHOD. JSON_TO_DATA METHOD JSON_TO_DATA. DATA:LV_JSON TYPE STRING. LV_JSON = IV_JSON. JSON_TO_DATA_INTERNAL( CHANGING CV_JSON = LV_JSON CA_DATA =</description>
    </item>
    
    <item>
      <title> SAP Domain 增强 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Enhance_Domain/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Enhance_Domain/</guid>
      <description>Domain 值范围增加固定值 Step1 : Fixed Value Append se11 进入domain 显示界面，选择 Goto -&amp;gt; Fixed Value Append 弹出下面对话框，输入自定义的 Fixed Value Append 名称： Step2: 维护添加值 保存并激活。 Ste</description>
    </item>
    
    <item>
      <title> 函数创建用户并分配权限 </title>
      <link>https://coldinfire.github.io/2020/ABAP_CreateUser/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_CreateUser/</guid>
      <description>函数创建用户并分配权限 REPORT ZCREATE_USER. DATA:LS_DATA TYPE BAPILOGOND, LS_ADDR TYPE BAPIADDR3, LS_DEFU TYPE BAPIDEFAUL, LS_PWD TYPE BAPIPWD, GT_RETURN TYPE TABLE OF BAPIRET2, GW_RETURN LIKE LINE OF GT_RETURN, GV_DEST TYPE RFCDEST, GT_FILE TYPE TABLE OF BAPIPROF, GW_FILE LIKE LINE OF GT_FILE. CALL FUNCTION &amp;#39;CRM_OFI_GET_RFCDEST&amp;#39; IMPORTING EV_RFCDEST = GV_DEST EXCEPTIONS NO_RFCDEST = 1 MULTIPLE_RFCDEST = 2 OTHERS = 3. IF SY-SUBRC &amp;lt;&amp;gt; 0. ENDIF.</description>
    </item>
    
    <item>
      <title> 获取Domain的 Value Range </title>
      <link>https://coldinfire.github.io/2020/ABAP_Utils_GetDomainValueRange/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Utils_GetDomainValueRange/</guid>
      <description>Function：DD_DOMVALUES_GET Domain 的 Value Range 值维护后，会保存到表 DD07V 中，函数 DD_DOMVALUES_GET 就是从该表中获取数据。 FORM FRM_GET_DOMAIN TABLES R_VALUE STRUCTURE DD07V USING PV_NAME. DATA: LV_RETURN TYPE SY-SUBRC. CALL FUNCTION</description>
    </item>
    
    <item>
      <title> SAP 系统监控和性能检查 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Utils_MointPerformanceCheck/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Utils_MointPerformanceCheck/</guid>
      <description>系统监控 系统监控是一项日常活动，当需要时我们应该清楚如何查找问题。 检查应用服务器 监控全系统的工作流程 监控单个实例的工作流程 监控锁定条目 CPU 使用</description>
    </item>
    
    <item>
      <title> SAP Adobe Form 工具 </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP_Utils/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP_Utils/</guid>
      <description>单元格加边框 在 adobe forms 中通过菜单 palettes-&amp;gt;border 可以给单元格添加或删除边框。 Text field 的 caption 位置设置 Text field 是 adobe form 中的一种布局对象，它的 caption(相当于字段文本标签</description>
    </item>
    
    <item>
      <title> SAP Adobe 使用 </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP_Use/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP_Use/</guid>
      <description>Adobe Form 程序调用 画好了对应的 Form 格式与数据绑定，就可以在 Report 程序中通过具体代码进行调用了。 SFPOUTPUTPARAMS 参数介绍 Parameter Desc Parameter Desc nodialog 是否弹出打印对话框 dest 打印终端指定 noprint 不打</description>
    </item>
    
    <item>
      <title> SAP Adobe Form </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP_Basis/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP_Basis/</guid>
      <description>SAP 中关于 Form 的设计有三种工具：Script Form，Smart Form 和 Interactive Form(Adobe Form). 要在 SAP 系统中展示 Adobe Form 需要 SAP 版本在 ECC6.0以上 ，而且要开发自定义的 Adobe</description>
    </item>
    
    <item>
      <title> 透明表删除Key值后激活 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</guid>
      <description>当业务场景发生变化，或则其它原因需要变更透明表的 Key 值时，保存和激活时会报错，需要使用 SE14 进行处理。 勾选Direct,Save Data;然后点击</description>
    </item>
    
    <item>
      <title> OLE 下载数据到EXCEL模板及速度优化 </title>
      <link>https://coldinfire.github.io/2020/ABAP_EXCEL_OLE/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_EXCEL_OLE/</guid>
      <description>OLE 下载 EXCEL 问题描述: 当项目中对导出数据EXCEL模板有要求时，ALV标准导出功能不能满足需要开发人员自定义下载数据程序。 步骤： 上传模板事务码：</description>
    </item>
    
    <item>
      <title> ALV 复制内容到剪贴板 </title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_ItabToClip/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_ItabToClip/</guid>
      <description>引用链接：ALV复制内容到剪贴板 使用场景 用在 ALV 的 USER_COMMAND 里面；复制 ALV 内容到剪贴板，已经考虑了 ALV 的列隐藏、筛选，负号已经提前；如果有选中的列，则复制</description>
    </item>
    
    <item>
      <title> ALV 添加执行进度功能 </title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_Progress/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_Progress/</guid>
      <description>添加进度条功能 为了更加清晰的了解到程序执行进度，可以在程序中添加显示进度条功能。 DATA:BEGIN OF gt_result OCCURS 0, sel(1), matnr TYPE mara-matnr, zz_edi_grp TYPE mara-zz_edi_grp, werks TYPE mseg-werks, eknam TYPE eknam, maktx TYPE maktx, num TYPE sy-tabix, row TYPE sy-tabix, icon TYPE icon-id,</description>
    </item>
    
    <item>
      <title> ABAP 科学计数法问题 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberQAS/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberQAS/</guid>
      <description>科学计数法转换数字 ABAP 函数 QSS0_FLTP_TO_CHAR_CONVERSION，能将 SAP 系统内的科学计数法显示的数字转换成一般数字。 DATA: l_result TYPE qsollwerte,</description>
    </item>
    
    <item>
      <title> SO10 创建标准文本 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SO10/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SO10/</guid>
      <description>创建标准文本 通过事物码 SO10 可以创建标准文本： 在标准文本中输入文本内容，文本内容可以加入其他的文本，可以实现文本嵌套。 Smartforms 中使用 Step1：Cre</description>
    </item>
    
    <item>
      <title> SAP 屏幕搜索帮助 </title>
      <link>https://coldinfire.github.io/2019/ABAP_ALV_Screen_SearchHelp/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALV_Screen_SearchHelp/</guid>
      <description>搜索帮助优先级 先检查 PROCESS ON VALUE-REQUEST 、AT SELECTION-SCREEN ON VALUE-REQUEST 再检查 PARAMETERS VALUE CHECK / SELECT-OPTIONS MATCHCODE OBJECT XXXX 其次是Check Table、然后检查表（或结构 ）字段是否绑定了搜索帮助 然后检查 Data</description>
    </item>
    
    <item>
      <title> ABAP Dynnamic Programer </title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</guid>
      <description>利用 Field Symbols 和数据参考的实例 *&amp;amp;-------------------------------------------------------------------- *&amp;amp; Report ZZSM_TEST_DYN *&amp;amp;-------------------------------------------------------------------- REPORT zzsm_test_dyn. DATA: tab_reference TYPE REF TO data, struc_reference TYPE REF TO data. DATA: descr TYPE REF TO cl_abap_structdescr. FIELD-SYMBOLS: &amp;lt;struc&amp;gt; TYPE ANY, &amp;lt;field&amp;gt; TYPE ANY, &amp;lt;itab&amp;gt; TYPE ANY TABLE. PARAMETERS: p_table(20) DEFAULT &amp;#39;LFA1&amp;#39; OBLIGATORY, p_rows TYPE i OBLIGATORY. TRY . &amp;#34;Dynamic create Table &amp;amp; Structure&amp;#34; CREATE DATA tab_reference TYPE STANDARD TABLE OF</description>
    </item>
    
    <item>
      <title> ABAP 字符串处理 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_String/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_String/</guid>
      <description>字符串的处理在程序中的使用十分常见，在这里结合自己日常的使用对ABAP的字符串常用操作进行总结，以便后续使用。 1.获取字符串长度 var1 = strlen( str );</description>
    </item>
    
    <item>
      <title> SAP 长文本 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_LongText/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_LongText/</guid>
      <description>介绍 长文本是用于在 SAP 系统中包含长文本的容器，通常将它们附加到业务对象上，用户可以输入自由注释。 长文本只能通过与其相连的业务对象的维护事务来维</description>
    </item>
    
    <item>
      <title> 内表导出到 Excel </title>
      <link>https://coldinfire.github.io/2019/ABAP_EXCEL_Export/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EXCEL_Export/</guid>
      <description>SAP 提供了 cl_salv_export_tool 类用于将 ALV 数据导出到 Excel，如果是早一点的版本，系统没有这个函数可以使用 XXL_SIMPLE_API。 XXL_SIMPLE_API 函数 XXL_SIMPLE_API 实现将 internal table 的数据</description>
    </item>
    
    <item>
      <title> ABAP 混合算术运算 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_MixedCalculate/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_MixedCalculate/</guid>
      <description>使用 在ABAP程序中将数值与表达式分别存放，通过表达式计算对应的结果。 一、调用BAPI：EVAL_FORMULA TYPES:BEGIN OF TY_VAL, OPERAND TYPE C, VALUE TYPE STRING, END OF TY_VAL. TYPES:BEGIN OF</description>
    </item>
    
    <item>
      <title> 递归遍历成本中心组 </title>
      <link>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</guid>
      <description>成本中心组下嵌套成本中心组 成本中心后台数据表是 CSKS，描述表是 CSKT。在表 CSKS 中，主键是 MANDT（客户端）、KOKRS（控制范围）、KO</description>
    </item>
    
    <item>
      <title> ABAP 动态内表 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicTable/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicTable/</guid>
      <description>ABAP动态内表操作 动态内表的列是可以跟随数据的变化而变化，可以使报表显示更简洁漂亮。 REPORT zdyn_test. DATA: dyn_table TYPE REF TO data, dyn_line TYPE REF TO data, FIELD-SYMBOLS: &amp;lt;dyn_table&amp;gt; TYPE STANDARD TABLE. FIELD-SYMBOLS: &amp;lt;dyn_wa&amp;gt; TYPE ANY. FIELD-SYMBOLS: &amp;lt;dyn_field&amp;gt; TYPE ANY. DATA:</description>
    </item>
    
    <item>
      <title> 维护成本控制凭证的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</guid>
      <description>介绍 此项配置是在后台为指定的成本控制范围（Controlling Area）维护编号范围，用于成本控制中的各类凭证。这是一种组织机构分组类的编</description>
    </item>
    
    <item>
      <title> 维护会计凭证号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</guid>
      <description>简介 在一个公司代码（Company Code）生成一张会计凭证（Accounting Document）之前，必须在对凭证类型设置一个号码范围。</description>
    </item>
    
    <item>
      <title> 维护物料主数据的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</guid>
      <description>简介 此项操作是在 SAP 系统后台，为需要使用的物料类型设定编号范围。它的操作是针对整个 Client 的。首先维护不重复的号码组，每组可包含内部段和外部段（两者</description>
    </item>
    
    <item>
      <title> 维护客户号码范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</guid>
      <description>简介 定义并分配客户主数据的号码范围，分为两个步骤，两步操作的对象都针对整个 Client。 定义号码范围（Define Number Ranges for Customer Master） 分配</description>
    </item>
    
    <item>
      <title> SAP Number Range Object </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRange/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRange/</guid>
      <description>操作说明 在 SAP 系统中，各类主数据及单据都需要使用编号进行唯一性标识，以此形成后台有着大量编号范围维护的配置操作，种类繁多。 编号范围维护分为两部</description>
    </item>
    
    <item>
      <title> SAP 异常处理 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_TryCatch/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_TryCatch/</guid>
      <description>SAP 异常处理 异常是在程序执行期间出现的问题。 当异常发生时，程序的正常流程中断，程序应用程序异常终止，这是不推荐的，因此这些异常将被处理。 异常处</description>
    </item>
    
    <item>
      <title> 发送带文本的 Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailText/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailText/</guid>
      <description>转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html 程序实例 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z14841_TEST010 *&amp;amp;---------------------------------------------------------------------* REPORT z14841_test010. TYPES: BEGIN OF stru_master, kunnr TYPE kunnr, &amp;#34; 客户编号 1&amp;#34; bukrs TYPE bukrs, &amp;#34; 公司代码&amp;#34; pro_mill TYPE werks_d, &amp;#34; 工厂&amp;#34; *quota TYPE zcdfquota, &amp;#34; 额度&amp;#34; *account TYPE char10, &amp;#34; 帐期&amp;#</description>
    </item>
    
    <item>
      <title> 发送带附件(Excel)的 Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailExcel/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailExcel/</guid>
      <description>转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html 程序实例 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZTEST_EMAIL_EXCEL *&amp;amp;---------------------------------------------------------------------* REPORT ztest_email_excel. TABLES: ekko. PARAMETERS: p_email TYPE somlreci1-receiver DEFAULT &amp;#39;coldfire@163.com&amp;#39;. TYPES: BEGIN OF t_ekpo, ebeln TYPE ekpo-ebeln, ebelp TYPE ekpo-ebelp, aedat TYPE ekpo-aedat, matnr TYPE ekpo-matnr, END OF t_ekpo. DATA: it_ekpo TYPE STANDARD TABLE OF t_ekpo INITIAL SIZE 0, wa_ekpo TYPE t_ekpo. TYPES: BEGIN OF t_charekpo, ebeln(10) TYPE c, ebelp(5) TYPE c, aedat(8) TYPE c, matnr(18) TYPE c,</description>
    </item>
    
    <item>
      <title> 移库产生的报错 </title>
      <link>https://coldinfire.github.io/2019/WM_Q1/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/WM_Q1/</guid>
      <description>Q：当进行移库操作时，同一个程序中执行多次移库动作会产生Error Message:No status object is available for HU XXXXXX(Error BS001 when posting goods movment)? A：需要每次进行移库前刷新数据： 调用 BAPI 进行移库操</description>
    </item>
    
    <item>
      <title> SAP 下载程序源码工具 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</guid>
      <description>转自 http://blog.sina.com.cn/s/blog_4d1570de0100pvhd.html 程序实例 *@---------------------------------------------------------------------* *@ Report ZZXUE01 下载程序代码 *@ T-code *@---------------------------------------------------------------------* *@ Created by Xavery Hsueh on 2011-03-01 *@ Lasted Edited date: *@---------------------------------------------------------------------* &amp;#34;REPORT XXX NO STANDARD PAGE HEADING.&amp;#34; Report ZZXUE01. &amp;#34;声明数据库表&amp;#34; TABLES:rs38m,trdir. &amp;#34;表结构类型的定义</description>
    </item>
    
    <item>
      <title> SAP 通过程序收发邮件 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Email_FM/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Email_FM/</guid>
      <description>程序所需 CLASS 和 FM CLASS CL_BCS：发送邮件的主要功能类，创建发送请求，添加发送内容，添加发送人等，最后发送指令的发出 CL_DOCUMENT_BC</description>
    </item>
    
    <item>
      <title> SAP 发送 Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_Email/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Email/</guid>
      <description>SAP 的邮件功能可以使用系统标准的邮件工作台收发邮件，也可以调用邮件 API 接口函数进行收发邮件。 标准邮件工作台收发邮件 RZ10：设置 Profile 参数 1、运行事</description>
    </item>
    
    <item>
      <title> SAP Memory 使用 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Memory/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Memory/</guid>
      <description>SAP Memory 和 ABAP Memory ABAP MEMORY：当活动的内部会话在单个主会话中调用另一个内部会话时，使用 export 和 import 参数传递数据。 SAP MEMORY：使用 set 和 get 参数将数据从</description>
    </item>
    
    <item>
      <title> ABAP DOI 使用 </title>
      <link>https://coldinfire.github.io/2019/ABAP_EXCEL_DOI/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EXCEL_DOI/</guid>
      <description>概述 DOI（Desktop office Integration）采用 OO 的思想实现与 Office 的结合使用，通过 DOI 对文档进行操作和处理。SAP 标准DEMO： SAPR</description>
    </item>
    
    <item>
      <title> 日期操作 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_Date/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_Date/</guid>
      <description>日期格式转换 系统标准Function CONVERSION_EXIT_IDATE_OUTPUT：INPUT (20080203)；OUTPUT (03FEB2008)</description>
    </item>
    
    <item>
      <title> 时间戳操作 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_Timestamp/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_Timestamp/</guid>
      <description>SAP 时间戳 获取时间戳方法 GET TIME STAMP FIELD time_stamp. DATA time_stamp TYPE tzntstmps. &amp;#34;UTC Time Stamp in Short Form (YYYYMMDDhhmmss)&amp;#34; GET TIME STAMP FIELD time_stamp. BAPI：IB_CONVERT_INTO_TIMESTAMP CALL FUNCTION &amp;#39;IB_CONVERT_INTO_TIMESTAMP&amp;#39; EXPORTING i_datlo = sy-datum i_timlo</description>
    </item>
    
    <item>
      <title> SAP Excel 操作实例(CLASS) </title>
      <link>https://coldinfire.github.io/2018/ABAP_EXCEL_CLASS/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EXCEL_CLASS/</guid>
      <description>SAP Excel 操作实现 (CLASS) *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZEXCEL_CLASS_DEMO *&amp;amp;---------------------------------------------------------------------* REPORT zexcel_class_demo. TABLES: sscrfields,rlgrap. TYPE-POOLS: slis. &amp;#34; TEXT-000 : Select file to upload &amp;#34; &amp;#34; TEXT-001 : Select file &amp;#34; SELECTION-SCREEN BEGIN OF BLOCK file_name WITH FRAME TITLE text-000. SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_file. PARAMETERS: p_file LIKE rlgrap-filename . SELECTION-SCREEN END OF LINE. SELECTION-SCREEN END OF BLOCK file_name. SELECTION-SCREEN FUNCTION KEY 1.</description>
    </item>
    
    <item>
      <title> SAP Excel 操作实例(BAPI) </title>
      <link>https://coldinfire.github.io/2018/ABAP_EXCEL_BAPI/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EXCEL_BAPI/</guid>
      <description>SAP Excel 操作实现 (BAPI) *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZEXCEL_BAPI *&amp;amp;---------------------------------------------------------------------* REPORT zexcel_bapi. TABLES: sscrfields,rlgrap. TYPE-POOLS: slis. &amp;#34; TEXT-000 : Select file to upload &amp;#34; &amp;#34; TEXT-001 : Select file &amp;#34; SELECTION-SCREEN BEGIN OF BLOCK file_name WITH FRAME TITLE text-000. SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_file. PARAMETERS: p_file LIKE rlgrap-filename . SELECTION-SCREEN END OF LINE. SELECTION-SCREEN END OF BLOCK file_name. SELECTION-SCREEN FUNCTION KEY 1.</description>
    </item>
    
    <item>
      <title> SAP Excel 文件操作 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Excel_TemplateOperate/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Excel_TemplateOperate/</guid>
      <description>操作 EXCEL 文件方式 使用类操作文件 CL_GUI_FRONTEND_SERVICES：该类提供了大量对操作系统文件的操作，如拷贝、列出文件名、打开文</description>
    </item>
    
    <item>
      <title> SAP 上传和下载 Excel </title>
      <link>https://coldinfire.github.io/2018/ABAP_Excel_Template/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Excel_Template/</guid>
      <description>上传模板 EXCEL 文档是通过 SMW0 上传的。SMW0 导入的对象都存储在表 WWWDATA 中，ABAP下载文件的逻辑就是从 WWWDATA 表获取要下载的文件的信息并执行下载。 选择模板类</description>
    </item>
    
    <item>
      <title> ALV tree 显示BOM结构 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_BOMTree/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_BOMTree/</guid>
      <description>实例代码 REPORT z_barry_alv_tree1_bom MESSAGE-ID oo. TABLES: stpox. INCLUDE &amp;lt;icon&amp;gt;. CLASS: cl_gui_column_tree DEFINITION LOAD, cl_gui_cfw DEFINITION LOAD . DATA: tree1 TYPE REF TO cl_gui_alv_tree , mr_toolbar TYPE REF TO cl_gui_toolbar . DATA: gs_stpox TYPE stpox, gt_stpox TYPE stpox OCCURS 0, gt_fieldcatalog TYPE lvc_t_fcat, gt_item_layout TYPE lvc_t_laci, gs_item_layout TYPE lvc_s_laci, okcode LIKE sy-ucomm . TYPES: BEGIN OF gs_f. INCLUDE STRUCTURE stpox. TYPES: node_key TYPE lvc_nkey, END OF gs_f. DATA:</description>
    </item>
    
    <item>
      <title> SM30 表维护 </title>
      <link>https://coldinfire.github.io/2018/ABAP_TABLE_Maintenance/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TABLE_Maintenance/</guid>
      <description>表维护创建 创建自定义表 需要设置为 Display/Maintenance Allowed.允许修改，才可以在SM30中进行数据维护。否则会产生以下异常： 创建表维护 权限组：控制访问权</description>
    </item>
    
    <item>
      <title> BDC 屏幕录制 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_BDC/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_BDC/</guid>
      <description>定义BDC (Batch Data Communication) BDC：SAP常用的一种数据传输方法。用于一些数据量大，但对速度要求不高的数据传输. 使用 BDC 的基本流程 Step1：获取源数据 一</description>
    </item>
    
    <item>
      <title> ABAP Submit 实现程序间互相调用 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_Submit/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_Submit/</guid>
      <description>ABAP 代码中通过 Submit 实现程序的调用以及调用时数据参数的传递。 程序准备 将要被调用的 Report: ZTEST_SUBMIT1 REPORT ZTEST_SUBMIT1. DATA: lv_matnr TYPE matnr. DATA: lv_charg TYPE charg. SELECT-OPTIONS: s1_matnr FOR matnr, s1_lgort FOR lgort. START-OF-SELECTION. DATA: lv_line TYPE i. lv_line = LINES( s1_matnr ). WRITE: / &amp;#39;S1_MATNR&amp;#39;,lv_line. lv_line</description>
    </item>
    
    <item>
      <title> 复制其他的内表/结构到当前表/结构 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Table_CopyFields/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table_CopyFields/</guid>
      <description>有时需要创建一个结构，但是字段和其他表或则结构类似，就可以采用复制的方式快速创建，而不用一个一个字段去输入。 1.SE11选择需要添加字段的表</description>
    </item>
    
    <item>
      <title> ALV 常用工具 </title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Utils/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Utils/</guid>
      <description>单元格中的数据被修改后，将ALV单元格中的数据立即刷新到ABAP对应的内表中 方法一：通过对 REUSE_ALV_GRID_DISPLAY 函数参数 i_grid_settings-edt_cll_cb 进行设置 DATA:gs_grid_settings TYPE lv_s_glay. gs_grid_settings-edt_cll_cb = &amp;#39;X&amp;#39;. CALL FUNCTION &amp;#39;REUSE_ALV_GRID_DISPLAY&amp;#39; EXPORTING i_grid_settings = gs_grid_settings 方法</description>
    </item>
    
    <item>
      <title> ABAP Range 定义 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Range/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Range/</guid>
      <description>Range使用 Range Table为SAP R/3系统标准内表的一种，结构与Selection Table一致，由SIGN,OPTION,LOW,HIG</description>
    </item>
    
    <item>
      <title> 负号前置 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_NegativeSignFront/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_NegativeSignFront/</guid>
      <description>SAP 系统中，很多种情况下负号都是在数字后面，如果在显示或计算数据时需要将负号放到数字前面。 调用系统BAPI 可以使用 function module：CLOI_P</description>
    </item>
    
    <item>
      <title> ABAP 弹出框设置 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_PopUpBox/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_PopUpBox/</guid>
      <description>可输入弹出框：POPUP_GET_VALUES_USER_HELP 在对话框中列出以选择一个或多个条目（或仅显示）弹出的 ALV 。 输入参数 Importing Description I_TITLE Dialog box</description>
    </item>
    
    <item>
      <title> 物料单位转换 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_ConvertMaterialUnit/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_ConvertMaterialUnit/</guid>
      <description>MARM物料单位转换 CALL function &amp;#39;MD_CONVERT_MATERIAL_UNIT&amp;#39; exporting i_matnr = matnr i_in_me = in_me i_out_me = out_me i_menge = in_menge importing e_menge = out_menge exceptions error_in_application = 1 error = 2 others = 3. IF sy-subrc &amp;lt;&amp;gt; 0. MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4. ENDIF. 物料单位比例获取 DATA: h_denominator(100) TYPE n, h_numerator(100)</description>
    </item>
    
    <item>
      <title> 开发常用事物码汇总 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Tcode/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Tcode/</guid>
      <description>ABAP 常用 TCode TCode Description TCode Description SPRO 显示后勤 SE18 BADI Builder ST05/SE30 系统跟踪/系统性能详细跟踪 SE19 BADI Implement ST22 查看日志信息 SE24 创建、修改、查询类对象 SM12 编辑锁定解除 SE21 创建、修改、查询包的</description>
    </item>
    
    <item>
      <title> 修改文件所属 Package </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_PackageChange/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_PackageChange/</guid>
      <description>创建 ABAP 程序的时候都要选择一个 Package，当后续需要修改程序所属的Package时可以使用以下方法： 通过SE38或则SE80打开对应的程序</description>
    </item>
    
    <item>
      <title> ABAP 截取中文字符串 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_StrCNChina/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_StrCNChina/</guid>
      <description>截取包含中文字符串 strlen()：只能计算包含英文字符串的长度，不能计算中文字符串的长度。 strlen(&amp;lsquo;你好啊&amp;rsquo;</description>
    </item>
    
    <item>
      <title> ABAP 通过字段找表程序 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_FieldFindProgram/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_FieldFindProgram/</guid>
      <description>获取数据保存在哪个表 前台对指定栏位 使用 F1 帮助找表 ST05 跟踪业务操作过程，检索需要的数据表.（此方法找表很高效） 对于文本字段找表，可以找到前台维护</description>
    </item>
    
    <item>
      <title> 小数后面去除后缀0 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_EndZero/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_EndZero/</guid>
      <description>小数后面去除后缀 0 FORM DATA_DELETE_ZERO using p_field z_result. DATA: var1 TYPE p DECIMALS 3, var2 TYPE p DECIMALS 2, var3 TYPE p DECIMALS 1, var4 TYPE i. move p_field to var1. move p_field to var2. move p_field to var3. move p_field to var4. IF var2 = var1. IF var3 = var1. IF var4 = var1. z_result = var4. ELSE. z_result = var3. ENDIF. ELSE.</description>
    </item>
    
    <item>
      <title> 表维护添加修改人信息 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Table_MaintenanceAddUser/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table_MaintenanceAddUser/</guid>
      <description>添加修改人信息 可以根据TCode进行相应的判断： 创建人信息: l_wa_head-ernam = sy-uname. l_wa_head-erdat = sy-datum. l_wa_head-erzet = sy-uzeit. call function &amp;#39;TERMINAL_ID_GET&amp;#39; exporting username = sy-uname importing terminal = l_wa_head-eterminal exceptions multiple_terminal_id = 1 no_terminal_found = 2 others = 3. 修改人信息： l_wa_head-urnam = sy-uname. l_wa_head-urdat</description>
    </item>
    
    <item>
      <title> 数据输入输出转换 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_DataConversion/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_DataConversion/</guid>
      <description>输入输出转换 如果某个变量参照的数据所对应的Domain具有转换规则，在(Write,ALV,文本框显示)，最后结果会自动转换。 通过转换规则输</description>
    </item>
    
  </channel>
</rss>